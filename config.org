#+TITLE: Xymacs
#+AUTHOR: Uiyx

* Performance
Reduce the frequency of garbage collection.

#+BEGIN_SRC emacs-lisp
;; The default is 800 kilobytes.  Measured in bytes.
(setq gc-cons-threshold (* 50 1000 1000))
#+END_SRC

* Package Management

#+BEGIN_SRC emacs-lisp
  (require 'package)

  (setq package-archives '(("melpa" . "https://melpa.org/packages/")
			   ("melpa-stable" . "https://stable.melpa.org/packages/")
			   ("org" . "https://orgmode.org/elpa/")
			   ("elpa" . "https://elpa.gnu.org/packages/")))
  (package-refresh-contents)
  (package-initialize)

  (unless (package-installed-p 'use-package)
    (package-install 'use-package))

(require 'use-package-ensure)
(setq use-package-always-ensure t)
#+END_SRC

* Evil

#+BEGIN_SRC emacs-lisp
(use-package undo-tree
  :init
  (global-undo-tree-mode 1))

  (use-package evil
      :init
    (setq evil-want-integration t)
    (setq evil-want-keybinding nil)
    (setq evil-vsplit-window-right t)
    (setq evil-split-window-below t)
    (setq evil-want-C-u-scroll t)
    (setq evil-respect-visual-line-mode t)
    (setq evil-undo-system 'undo-tree)
    (evil-mode))

    (use-package evil-collection
     :after evil
     :config
(setq evil-collection-company-use-tng nil)
:custom
(evil-collection-outline-bind-tab-p nil)
:config
     (setq evil-collection-mode-list '(dashboard dired ibuffer elfeed neotree vterm))
    (evil-collection-init))

     ;; disable evil in specific modes
;;  (evil-set-initial-state 'neotree-mode 'emacs)
;;  (evil-set-initial-state 'elfeed-search-mode 'emacs)
;;  (evil-set-initial-state 'elfeed-show-mode 'emacs)

#+END_SRC

* Org mode
Org-mode configuration.

** Options

#+BEGIN_SRC emacs-lisp
(add-hook 'org-mode-hook 'org-indent-mode)
(setq org-directory "~/projects/org/"
      org-agenda-files '("~/projects/org/agenda.org")
      org-default-notes-file (expand-file-name "notes.org" org-directory)
      org-ellipsis " â–¼ "
      org-log-done 'time
      org-journal-dir "~/projects/org/journal/"
      org-journal-date-format "%B %d, %Y (%A) "
      org-journal-file-format "%d-%m-%Y.org"
      org-hide-emphasis-markers t)
(setq org-src-preserve-indentation nil
      org-src-tab-acts-natively t
      org-edit-src-content-indentation 0)

  ;; native source code block highlighting
(setq org-src-fontify-natively t
    org-src-tab-acts-natively t
    org-confirm-babel-evaluate nil
    org-edit-src-content-indentation 0)
#+END_SRC

* Looks
Everything UI.

** Disable the bars

#+BEGIN_SRC emacs-lisp
(menu-bar-mode -1)
(tool-bar-mode -1)
(scroll-bar-mode -1)
#+END_SRC

** Highlight current line

#+BEGIN_SRC emacs-lisp
(global-hl-line-mode t)
#+END_SRC

** Line numbers

#+BEGIN_SRC emacs-lisp
  ;; set line numbers
  (global-display-line-numbers-mode 1)
  (global-visual-line-mode t)

  ;; disable line numbers on specific buffers
  (defun my/disable-line-numbers (&optional dummy)
    (display-line-numbers-mode -1)(global-visual-line-mode t))
  ;; list of buffers to disable line numbers on
  (add-hook 'neo-after-create-hook 'my/disable-line-numbers)
  (add-hook 'org-agenda-finalize-hook 'my/disable-line-numbers)
  (add-hook 'vterm-mode-hook 'my/disable-line-numbers)
#+END_SRC 

** Theme

 #+BEGIN_SRC emacs-lisp
(use-package catppuccin-theme)
 (load-theme 'catppuccin t)
 #+END_SRC

** Fonts
 
#+BEGIN_SRC emacs-lisp
	  (set-face-attribute 'default nil
	    :font "Literation Mono Nerd Font"
	    :height 110
	    :weight 'medium)
	  (set-face-attribute 'variable-pitch nil
	    :font "Literation Sans Nerd Font"
	    :height 120
	    :weight 'medium)
	  (set-face-attribute 'fixed-pitch nil
	    :font "Literation Mono Nerd Font"
	    :height 110
	    :weight 'medium)
	  ;; Makes commented text and keywords italics.
	  ;; This is working in emacsclient but not emacs.
	  ;; Your font must have an italic face available.
	  (set-face-attribute 'font-lock-comment-face nil
	    :slant 'italic)
	  (set-face-attribute 'font-lock-keyword-face nil
	    :slant 'italic)

	  ;; Uncomment the following line if line spacing needs adjusting.
	  (setq-default line-spacing 0.12)

	  ;; Needed if using emacsclient. Otherwise, your fonts will be smaller than expected.
	  (add-to-list 'default-frame-alist '(font . "Literation Mono Nerd Font-12"))
	  ;; changes certain keywords to symbols
	  (setq global-prettify-symbols-mode t)

;; run :all-the-icons-install-fonts to install the fonts!
    (use-package all-the-icons)
#+END_SRC

** Modeline

#+BEGIN_SRC emacs-lisp
  (use-package doom-modeline)
  (doom-modeline-mode 1)
#+END_SRC

** Dashboard

#+BEGIN_SRC emacs-lisp
(use-package dashboard
  :ensure t
  :init
  (setq dashboard-set-heading-icons t)
  (setq dashboard-set-file-icons t)
  (setq dashboard-banner-logo-title "Welcome to Xymacs!")
  (setq dashboard-startup-banner "~/.emacs.d/dash.png")
  (setq dashboard-center-content t)
  (setq dashboard-items '((recents . 5)
                          (bookmarks . 3)))
  (setq dashboard-footer-messages '("Do what thou wilt shall be the whole of the Law"
                                    "There are no rules in love and lisp!"
                                    "I LOVE LEAN!"
                                    "ERROR: Hugs and kisses not sufficient!"
                                    "Hello? Is this thing even on?"
                                    "So mote it be"
                                    "Join us now and share the software"
                                    "Best OS on the planet!"
                                    "What the FUCK is a britain??"))
  (setq dashboard-footer-icon (all-the-icons-octicon "heart"
                                                   :height 1.1
                                                   :v-adjust -0.05
                                                   :face 'font-lock-keyword-face))

  :config
  (dashboard-setup-startup-hook)
  (dashboard-modify-heading-icons '((recents . "file-text")
			      (bookmarks . "book"))))
#+END_SRC

*** Emacsclient dashboard
#+BEGIN_SRC emacs-lisp
(setq initial-buffer-choice (lambda () (get-buffer "*dashboard*")))
#+END_SRC

* Misc options
Small misc tweaks and options

** sudo-edit
#+BEGIN_SRC emacs-lisp
(use-package sudo-edit)
(use-package auto-sudoedit)
(auto-sudoedit-mode 1)
#+END_SRC

** Rainbow delimiters
#+BEGIN_SRC emacs-lisp
(use-package rainbow-delimiters)
(add-hook 'prog-mode-hook #'rainbow-delimiters-mode)
#+END_SRC

** Electric-pair-mode

#+BEGIN_SRC
(electric-pair-mode 1)
#+END_SRC


** Set coding system to UTF-8

#+BEGIN_SRC emacs-lisp
(set-default-coding-systems 'utf-8)
#+END_SRC

** Scrolling

#+BEGIN_SRC emacs-lisp
 (use-package smooth-scrolling
   :init
 (smooth-scrolling-mode 1)
 (setq smooth-scroll-margin 6))
 (setq scroll-conservatively 101)
 (setq use-dialog-box nil)
 (setq mouse-wheel-follow-mouse 't) ;; scroll window under mouse
 (setq scroll-step 1) ;; keyboard scroll one line at a timesetq mouse-wheel-progressive-speed nil
#+END_SRC

** Clean whitespaces

#+BEGIN_SRC emacs-lisp
(use-package ws-butler
  :hook ((text-mode . ws-butler-mode)
         (prog-mode . ws-butler-mode)))
#+END_SRC

** Disable automatic backup files

#+BEGIN_SRC emacs-lisp
(setq make-backup-files nil)
(setq auto-save-default nil)
#+END_SRC

** Indentation

#+BEGIN_SRC
(setq-default tab-width 4)
(setq-default standard-indent 4)
(setq c-basic-offset tab-width)
(setq-default electric-indent-inhibit t)
(setq-default indent-tabs-mode t)
(setq backward-delete-char-untabify-method 'nil)
#+END_SRC

** Enable prettify symbols

#+BEGIN_SRC emacs-lisp
(global-prettify-symbols-mode t)
#+END_SRC

* Keybindings

** General
General makes it easier to manager keybindings
   
#+BEGIN_SRC emacs-lisp
    (use-package general
  :config
(general-evil-setup t))

;; general keybindings
(nvmap :prefix "SPC"
"d" '(find-file :which-key "Find file")
;; kills
"k b" '(kill-buffer :which-key "Kill buffer")
"k c" '(kill-current-buffer :which-key "Kill current buffer")

"v" '((lambda () (interactive) (save-buffer) (emacs-everywhere-finish-or-ctrl-c-ctrl-c)) :which-key "Write and finish everywhere")
"q" '(delete-frame :which-key "Delete frame")
;; reload
"r r" '((lambda () (interactive) (load-file "~/.emacs.d/init.el")) :which-key "Reload config"))
#+END_SRC
   
** Zooming

#+BEGIN_SRC emacs-lisp
;; zoom in/out
(global-set-key (kbd "C-=") 'text-scale-increase)
(global-set-key (kbd "C--") 'text-scale-decrease)
(global-set-key (kbd "<C-wheel-up>") 'text-scale-increase)
(global-set-key (kbd "<C-wheel-down>") 'text-scale-decrease)
#+END_SRC
  
** ESC stop all keybind thingies

#+BEGIN_SRC emacs-lisp
(global-set-key (kbd "<escape>") 'keyboard-escape-quit)
#+END_SRC

** Commenting lines

#+BEGIN_SRC emacs-lisp
(use-package evil-nerd-commenter)
(nvmap
  "g c" '(evilnc-comment-or-uncomment-lines :which-key "Comment/Uncomment"))
#+END_SRC

* Which key

#+BEGIN_SRC emacs-lisp
(use-package which-key)
(which-key-mode)
#+END_SRC

* File management

** Neotree

#+BEGIN_SRC emacs-lisp
  (defcustom neo-window-width 25
  "*Specifies the width of the NeoTree window."
  :type 'integer
  :group 'neotree)

  (use-package neotree
    :config
    (setq neo-smart-open t
	  neo-window-width 25
	  neo-theme (if (display-graphic-p) 'icons 'arrow)
	  ;;neo-window-fixed-size nil
	  inhibit-compacting-font-caches t
	  projectile-switch-project-action 'neotree-projectile-action) 
	  ;; truncate long file names in neotree
	  (add-hook 'neo-after-create-hook
	     #'(lambda (_)
		 (with-current-buffer (get-buffer neo-buffer-name)
		   (setq truncate-lines t)
		   (setq word-wrap nil)
		   (make-local-variable 'auto-hscroll-mode)
		   (setq auto-hscroll-mode nil)))))

  ;; show hidden files
  (setq-default neo-show-hidden-files t)

  ;; keybind
  (general-define-key :prefix "SPC" :keymaps '(normal emacs)
	 "e"   'neotree-toggle)
#+END_SRC

* GIT

#+BEGIN_SRC emacs-lisp
(use-package magit)
#+END_SRC

* Projectile

#+BEGIN_SRC emacs-lisp
(use-package projectile
  :ensure t
  :config
  (projectile-global-mode 1))
#+END_SRC

* Languages

** Completion

#+BEGIN_SRC emacs-lisp
(use-package corfu
  ;; Optional customizations
  :custom
  (corfu-cycle t)                ;; Enable cycling for `corfu-next/previous'
  (corfu-auto t)                 ;; Enable auto completion

  ;; Recommended: Enable Corfu globally.
  ;; This is recommended since dabbrev can be used globally (M-/).
  :init
  (global-corfu-mode))

;; Optionally use the `orderless' completion style. See `+orderless-dispatch'
;; in the Consult wiki for an advanced Orderless style dispatcher.
;; Enable `partial-completion' for files to allow path expansion.
;; You may prefer to use `initials' instead of `partial-completion'.
(use-package orderless
  :init
  ;; Configure a custom style dispatcher (see the Consult wiki)
  ;; (setq orderless-style-dispatchers '(+orderless-dispatch)
  ;;       orderless-component-separator #'orderless-escapable-split-on-space)
  (setq completion-styles '(orderless)
        completion-category-defaults nil
        completion-category-overrides '((file (styles . (partial-completion))))))

;; A few more useful configurations...
(use-package emacs
  :init
  ;; TAB cycle if there are only few candidates
  (setq completion-cycle-threshold 5)

  ;; Emacs 28: Hide commands in M-x which do not apply to the current mode.
  ;; Corfu commands are hidden, since they are not supposed to be used via M-x.
  ;; (setq read-extended-command-predicate
  ;;       #'command-completion-default-include-p)

  ;; Enable indentation+completion using the TAB key.
  ;; `completion-at-point' is often bound to M-TAB.
  (setq tab-always-indent 'complete))
#+END_SRC

** Eglot with Corfu

#+BEGIN_SRC emacs-lisp
(use-package eglot)
;; specify explicitly to use Orderless for Eglot
(setq completion-category-overrides '((eglot (styles orderless))))

;; undo the Eglot modification of completion-category-defaults
(with-eval-after-load 'eglot
   (setq completion-category-defaults nil))

;; starting elgot with modes
 (add-hook 'c-mode-hook 'eglot-ensure)
 (add-hook 'cc-mode-hook 'eglot-ensure)
 (add-hook 'haskell-mode-hook 'eglot-ensure)
 (add-hook 'lua-mode-hook 'eglot-ensure)
 (add-hook 'go-mode-hook 'eglot-ensure)
 (add-hook 'rust-mode-hook 'eglot-ensure)

 (use-package go-mode)
 (use-package rust-mode)
 (use-package haskell-mode)
 (use-package lua-mode)
#+END_SRC

* Non-editor configuration

** Elfeed

#+BEGIN_SRC emacs-lisp
(use-package elfeed)
(use-package elfeed-org)
(setq elfeed-feeds
      '("www.fsf.org/static/fsforg/rss/news.xml"
        "https://planet.emacslife.com/atom.xml"))
#+END_SRC

** Vterm

#+BEGIN_SRC emacs-lisp
(use-package vterm)
(add-hook 'vterm-mode-hook (lambda ()
                                    (setq-local global-hl-line-mode
                                                nil)))
#+END_SRC
